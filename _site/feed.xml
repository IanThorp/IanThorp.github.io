<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ian Thorp</title>
    <description>Keep up with my aventures at Dev Bootcamp!
</description>
    <link>http://ianthorp.github.io//</link>
    <atom:link href="http://ianthorp.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 28 Feb 2016 18:46:49 -0800</pubDate>
    <lastBuildDate>Sun, 28 Feb 2016 18:46:49 -0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>How Does The Internet Work?</title>
        <description>&lt;p&gt;The internet. A series of tubes some say. Very complex regardless. But the big question is, just how does the damn thing work.&lt;/p&gt;

&lt;p&gt;The internet is basically a process for sending data between two computers. It actually uses lots of computers in between to help transfer these packets. No one is actually in charge of the internet. No one really runs it. It is run by everyone using it. All of us doing a small part.&lt;/p&gt;

&lt;p&gt;Basically, we are sending and recieving lots and lots of data packets over and over again. Regardless of how it works, I think this internet thing is really going to catch on.&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Feb 2016 00:00:00 -0800</pubDate>
        <link>http://ianthorp.github.io//culture/2016/02/21/internet.html</link>
        <guid isPermaLink="true">http://ianthorp.github.io//culture/2016/02/21/internet.html</guid>
        
        
        <category>Culture</category>
        
      </item>
    
      <item>
        <title>Ruby/JavaScript Cheat Sheet</title>
        <description>    &lt;section class=&quot;chart&quot;&gt;
      &lt;table&gt;
        &lt;tr class=&quot;cheat-main-table-head&quot;&gt;
          &lt;th&gt;Ruby&lt;/th&gt;
          &lt;th&gt;JavaScript&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
        &lt;/tr&gt;

        &lt;tr class=&quot;cheat-minor-table-head&quot;&gt;
          &lt;th&gt;Methods&lt;/th&gt;
          &lt;th&gt;Functions&lt;/th&gt;
        &lt;/tr&gt;

        &lt;tr class=&quot;cheat-table-data&quot;&gt;
          &lt;td&gt;&lt;pre&gt;&lt;code&gt;
            def method_name(argument_1, argument_2)
              code
            end
          &lt;/code&gt;&lt;/pre&gt;
          &lt;pre&gt;&lt;code&gt;
            def method_name argument_1, argument_2
              code
            end
          &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
          &lt;td&gt;&lt;pre&gt;&lt;code&gt;
            function function_name(argument_1, argument_2) {
              code
            }
          &lt;/code&gt;&lt;/pre&gt;
          &lt;pre&gt;&lt;code&gt;
            var function_name = function(argument_1, argument_2) {
              code
            }
          &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr class=&quot;cheat-minor-table-head&quot;&gt;
          &lt;th&gt;Loops&lt;/th&gt;
          &lt;th&gt;Loops&lt;/th&gt;
        &lt;/tr&gt;

        &lt;tr class=&quot;cheat-table-data&quot;&gt;
          &lt;td&gt;&lt;pre&gt;&lt;code&gt;
            i = 0
            while i &lt; 100
              code
              i += 1
            end
          &lt;/code&gt;&lt;/pre&gt;
          &lt;pre&gt;&lt;code&gt;
            i = 0
            until i &gt;= 100
              code
              i += 1
            end
          &lt;/code&gt;&lt;/pre&gt;
          &lt;pre&gt;&lt;code&gt;
            100.times
              code
            end
          &lt;/code&gt;&lt;/pre&gt;
          &lt;pre&gt;&lt;code&gt;
            if i &lt; 100
              code
              i += 1
            elsif i &lt; 200
              code
              i += 1
            else
              code
            end
          &lt;/code&gt;&lt;/pre&gt;
          &lt;pre&gt;&lt;code&gt;
            for i in 1..100 do
              code
            end
          &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
          &lt;td&gt;&lt;pre&gt;&lt;code&gt;
            var i = 1;
            do
              code
              i++;
            while(i &lt; 100);
          &lt;/code&gt;&lt;/pre&gt;
          &lt;pre&gt;&lt;code&gt;
            var i = 1;
            while (i &lt; 100) {
              code
              i ++;
            }
          &lt;/code&gt;&lt;/pre&gt;
          &lt;pre&gt;&lt;code&gt;
            for (var i of object) {
              code // iterates over property values
            }

            for (var i in object) {
              code // iterates over property names
            }
          &lt;/code&gt;&lt;/pre&gt;
          &lt;pre&gt;&lt;code&gt;
            for (var i=1; i&lt;100; i++) {
            code
            }
          &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr class=&quot;cheat-minor-table-head&quot;&gt;
          &lt;th&gt;Hash&lt;/th&gt;
          &lt;th&gt;Object&lt;/th&gt;
        &lt;/tr&gt;

        &lt;tr class=&quot;cheat-table-data&quot;&gt;
          &lt;td&gt;&lt;pre&gt;&lt;code&gt;
            hash = {
              key_1 =&gt; value_1,
              key_2 =&gt; value_2
            }
          &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
          &lt;td&gt;&lt;pre&gt;&lt;code&gt;
            var object = {
              property1: value1,
              property2: value2
            }
          &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr class=&quot;cheat-minor-table-head&quot;&gt;
          &lt;th&gt;Array&lt;/th&gt;
          &lt;th&gt;Array&lt;/th&gt;
        &lt;/tr&gt;

        &lt;tr class=&quot;cheat-table-data&quot;&gt;
          &lt;td&gt;&lt;pre&gt;&lt;code&gt;
            array = [element_1, element_2]
          &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
          &lt;td&gt;&lt;pre&gt;&lt;code&gt;
            var array = [element1, element2];
          &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/section&gt;</description>
        <pubDate>Sun, 21 Feb 2016 00:00:00 -0800</pubDate>
        <link>http://ianthorp.github.io//ruby/basics,/javascript/basics/2016/02/21/cheat-sheet.html</link>
        <guid isPermaLink="true">http://ianthorp.github.io//ruby/basics,/javascript/basics/2016/02/21/cheat-sheet.html</guid>
        
        
        <category>Ruby</category>
        
        <category>basics,</category>
        
        <category>JavaScript</category>
        
        <category>basics</category>
        
      </item>
    
      <item>
        <title>Ruby vs JavaScript: Hashes and Objects</title>
        <description>&lt;p&gt;Ruby and Javascript are similar in a lot of ways. Both are object oriented and both scripting languages. They even have a similar way to build what is called a hash in ruby. They actually build the hashes and objects in a very similar way, but do have some slight differences.&lt;/p&gt;

&lt;p&gt;Ruby&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;hash_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;hash_key: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;JavaScript&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hashKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The main difference here is that you need to put the word “var” before the object in JavaScript. Otherwise, in Ruby, snake_case is prefered while JavaScript prefers camelCase. This is not necessary for the code to work, but a style preference.&lt;/p&gt;

&lt;p&gt;Calling the values will also be done in a similar way.&lt;/p&gt;

&lt;p&gt;Ruby&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;hash_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hash_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash_value&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;JavaScript&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;hashName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hashKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hashValue&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Both of these scripting languages have their strengths and weaknesses. In general, Javascript is used more often for front end web development and ruby is used more often for back end web development. If you want to become a full stack developer, it is important to know both and know them well.&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Feb 2016 00:00:00 -0800</pubDate>
        <link>http://ianthorp.github.io//ruby/basics,/javascript/basics/2016/02/15/javascript.html</link>
        <guid isPermaLink="true">http://ianthorp.github.io//ruby/basics,/javascript/basics/2016/02/15/javascript.html</guid>
        
        
        <category>Ruby</category>
        
        <category>basics,</category>
        
        <category>JavaScript</category>
        
        <category>basics</category>
        
      </item>
    
      <item>
        <title>Instance Variables and Methods</title>
        <description>&lt;h3 id=&quot;methods&quot;&gt;Methods&lt;/h3&gt;

&lt;p&gt;Instance variables and methods can be incredibly useful when used properly. Keep in mind that these will be much more limited in how far reaching they are. Of course, as the name implies, they can only be used on a specific instance of a class.&lt;/p&gt;

&lt;p&gt;The easiest way to learn this is to jump right in to coding. I will create an object and for keeping an inventory, and a class method to find an object in there.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Inventory&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;locate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The location of &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; has been found.&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice the use of self to define class methods. This method will be used to search all objects of the class Inventory. Since it is affected by all, and not just one instance, of this class, the class method suits it best.&lt;/p&gt;

&lt;p&gt;If we just wanted to do something to a single instance of this class, instance methods are the way to go.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Inventory&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;locate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The location of &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; has been found.&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Current item has been depleted by &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;They will also be called for in a different way. The class method being called on the class name and the instance(deplete) method being called on just an instance of that class, e.g., tissues, rice, pants.&lt;/p&gt;

&lt;h3 id=&quot;variables&quot;&gt;Variables&lt;/h3&gt;

&lt;p&gt;Now, when making classes with variables, the two main ones you need to worry about are instance variables and class variables. Here is how these variables are set.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@variable1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;instance variable&quot;&lt;/span&gt;
&lt;span class=&quot;vc&quot;&gt;@@variable2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;class variable&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With instance variables, this can be different for each and every instance of a particular class. If you change it for one instance, it will not change any other instances. Now class variables are a little more far reaching. If you change a class variable anywhere, it will change it for each and every instance of the class.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Feb 2016 00:00:00 -0800</pubDate>
        <link>http://ianthorp.github.io//ruby/basics/2016/02/07/ruby-classes.html</link>
        <guid isPermaLink="true">http://ianthorp.github.io//ruby/basics/2016/02/07/ruby-classes.html</guid>
        
        
        <category>Ruby</category>
        
        <category>basics</category>
        
      </item>
    
      <item>
        <title>Cycle: Using Enumerables and Enumerators</title>
        <description>&lt;p&gt;The words enumerables and enumerators may be words that you have never heard before. If you are not into programming or math, there is a good chance you are not familar with them. Basically, an Enumerator is a method that will go over each element of a enumerable, one at a time. Enumerables that you are using will often be arrays or hashes.&lt;/p&gt;

&lt;p&gt;Now, there are many different enumerable methods out there. &lt;a href=&quot;http://ruby-doc.org/&quot;&gt;Ruby-docs&lt;/a&gt; is a great place to check all of these out and learn exactly how to implement them. Today, I will go over one of my favorites, called the cycle method.&lt;/p&gt;

&lt;p&gt;Cycle is a method that can definitely save you some time and help make code DRY. Before I found this method, I was using a counter variable to actually keep track of how many times I performed a method on an array or hash. Although this worked, it definitely was not the cleanest way to write the code. With cycle, you will need an n value, an object, and a code block.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;cycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will call the block for each and every element of the enumerable “n” times. Now, optionally you can leave the “n” blank, and this will repeat the block on every element infinitely. If you are not careful with this, you can create an infinite loop. View some examples below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cycle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first cycle will print out “one”,”two”, 3 … infinitely. The second cycle will print out the same, but only twice. This brings you a total of 6 elements executed.&lt;/p&gt;

&lt;p&gt;Now go forth and have fun with enumberables. There are a multitude of things you can do with these fancy methods, and they definitely make you job as a developer a bit easier and a bit cleaner.&lt;/p&gt;
</description>
        <pubDate>Sun, 31 Jan 2016 00:00:00 -0800</pubDate>
        <link>http://ianthorp.github.io//ruby/basics/2016/01/31/enumerable-methods.html</link>
        <guid isPermaLink="true">http://ianthorp.github.io//ruby/basics/2016/01/31/enumerable-methods.html</guid>
        
        
        <category>Ruby</category>
        
        <category>basics</category>
        
      </item>
    
      <item>
        <title>Arrays and Hashes</title>
        <description>&lt;p&gt;Welcome welcome welcome. This past week over at Dev Bootcamp I have been going over lots of Ruby practice. The thing that seemed to be the toughest for me was figuring out these darn arrays and hashes. Now, these are very similar concepts, but with one major difference: keys vs indices.&lt;/p&gt;

&lt;p&gt;Let’s start with the slightly simpler of the two, arrays. Array is basically going to be a list of values. These individual values in the same array could be any object (numbers, strings, booleans). The objects do have to be organized some way though, so we can find them again later. They are organized into an ordered numerical index. So the first object you have in your array will be at index 0, second object at index 1, third object at index 2, and so on. An array can be as big or small as you like. It could literally be empty and still be an array. This is the go to technique for data organization. Check out a couple different ways to make an array below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now hashes work a little bit differently, but share some properties as well. Hashes can also any size, contain values, and these values can be any object. The big difference is how they are organized. Instead of an index to be a place holder for a value, hashes use what we call keys. Now keys can be any object as well, but, unlike values, they are unique. So everything in a hash in organized into these key =&amp;gt; value pairs. Check out a couple different ways to create new hashes below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;hash_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value_1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the question is, “which one do you use?” On one hand, arrays are nice for ordered data. If your data has a specific way it hsould be read out, the numerical index that is already set up is the perfect way to organize and retrieve all of your data. If the order does not matter so much, but you want to be able to easily retrieve individual elements, hashes might be the way to go. Imagine you are making a dictionary, and wanted to find the word “interesting.” With an array, you would have to know its index by heart (unlikely) or search through the entire array one by one to find it. If set up the dictionary as a hash , with the word as the key, it would be much simpler to just find the key.&lt;/p&gt;

&lt;p&gt;Overall, the main difference between a has and array is how the data is organized, either in a index =&amp;gt; value pair or a set of key =&amp;gt; value pairs. Both are very powerful, but definitely have their own strengths. Good luck on playin with both of them. Have fun coding!&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jan 2016 17:57:13 -0800</pubDate>
        <link>http://ianthorp.github.io//ruby/basics/2016/01/24/arrays-hashes.html</link>
        <guid isPermaLink="true">http://ianthorp.github.io//ruby/basics/2016/01/24/arrays-hashes.html</guid>
        
        
        <category>Ruby</category>
        
        <category>basics</category>
        
      </item>
    
      <item>
        <title>Diversity In Tech</title>
        <description>&lt;p&gt;Diversity in tech is a huge issue today. There are many reasons woman and minorities are not equally represented in a white male dominated tech industry, and maybe even a solution or two out there. One of the big reasons is the culture of tech as a whole.&lt;/p&gt;

&lt;p&gt;Much of the big guys in tech do not have very good stats when it comes to equal hiring in the workplace. Out of Google, Facebook, Twitter, Microsoft, Apple, Amazon, and Intel, the highest percentage of women in the work force was 37 percent with Amazon leading the way. If 37 percent is the highest, we have a long way to go. Ethnic diversity is even lower with only 15 percent African American employees at Amazon and a whopping 1 percent and 2 percent at Facebook and Google respectively. Asian is around 23 percent for all companies combined.&lt;/p&gt;

&lt;p&gt;The numbers for leadership get even worse. Facebook leads the pack with 23 percent of its leadership being women. Microsoft trails in the back with only 13 percent of their leadership being women. All in all, the big tech companies average out at 79 percent of leadership being white. That does not promote much diversity.&lt;/p&gt;

&lt;p&gt;statistics from &lt;a href=&quot;http://www.theverge.com/2015/8/20/9179853/tech-diversity-scorecard-apple-google-microsoft-facebook-intel-twitter-amazon&quot;&gt;The Verge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But “what can be done?” you may ask. There are definitely some basic steps that can be taken to improve leadership diversity and therefore, I believe, improve diversity in the bulk of the tech industry. Leadership training programs are so so important to making people interested in and capable of handling those leadership roles. People in the current leadership need to be able to lay out plans and give advice to minorities and women in how to reach these high up positions. This will hopefully trickle down into more diversity being interested and hired.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jan 2016 00:00:00 -0800</pubDate>
        <link>http://ianthorp.github.io//culture/2016/01/24/diversity-tech.html</link>
        <guid isPermaLink="true">http://ianthorp.github.io//culture/2016/01/24/diversity-tech.html</guid>
        
        
        <category>Culture</category>
        
      </item>
    
      <item>
        <title>Margins, Borders, and Paddings OH MY!!!</title>
        <description>&lt;p&gt;The topic of today is margins, borders, and padding. All of these elements have a very important place in positioning your content. Basically, these will help you determine where each piece of information on your page will go. Take a look at this picture to get a rough idea.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/margin-border-padding.png&quot; alt=&quot;Margin Border Padding&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From Google DevTools&lt;/p&gt;

&lt;p&gt;We will start going from the outside all the way in. The margin plays a big factor in the white space between one element and the next. The main thing to know about this is that it lives outside of the border.&lt;/p&gt;

&lt;p&gt;The border seperates the padding and the margin. This can have a size of zero, be invisible, or have color and texture. This is great for outlining any element you have.&lt;/p&gt;

&lt;p&gt;The padding lives closest to your actual element. This, similar to the margin, is also white space. The main difference between them is that this lives inside of the border.&lt;/p&gt;

&lt;p&gt;Using all three of these properties greatly helps to create elements with the proper spacing, or lack there of. Happy Coding!&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jan 2016 00:00:00 -0800</pubDate>
        <link>http://ianthorp.github.io//css/basics/2016/01/17/css-concepts.html</link>
        <guid isPermaLink="true">http://ianthorp.github.io//css/basics/2016/01/17/css-concepts.html</guid>
        
        
        <category>CSS</category>
        
        <category>basics</category>
        
      </item>
    
      <item>
        <title>Version Control</title>
        <description>&lt;p&gt;Version control is one of the first things any budding developer should learn. This will basically save multiple copies of your project at multiple checkpoints, and have them accesible to roll back to if you accidentally put in some incorrect code. Version control is great for a whole mess of other reasons too, like easy collaboration, and good tracking.&lt;/p&gt;

&lt;p&gt;The specific version control we are working with is git. Git works on the idea of branches coming off of one master file. These branches can be seen as almost parallel universes where the code takes a different direction without affecting the main master file. If you find that you like any of these directions, you can merge them back into the main file. With this, git keeps track of all of these changes for you. Whenever you have a section of code you like, you can “commit” that code to the branch. When this code was committed, who committed it, and why they committed it is all recorded. If any of these new commits ever fail you, you can always roll back to an older version or different branch of code.&lt;/p&gt;

&lt;p&gt;Now, as developers, we of course want to collaborate with others. Often times, we won’t be able to simply use the same computer, or directly email updates to all of our partners. This is where Github comes in. Github allows us to have all of our code in the cloud, accesible by anyone we want at anytime, even simultaneously. Once any of these individuals is happy with their code, they can upload it to Github. These changes must now be reviewed by someone else, before they merge back in with your master copy of the code. Safeties like this help protect the code from bugs being introduced on accident, but still allow relatively natural and easy co-working.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Dec 2015 00:00:00 -0800</pubDate>
        <link>http://ianthorp.github.io//version/control/2015/12/31/git.html</link>
        <guid isPermaLink="true">http://ianthorp.github.io//version/control/2015/12/31/git.html</guid>
        
        
        <category>Version</category>
        
        <category>control</category>
        
      </item>
    
  </channel>
</rss>
